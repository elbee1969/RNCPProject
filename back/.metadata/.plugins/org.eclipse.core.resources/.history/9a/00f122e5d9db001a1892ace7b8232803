package fr.formation.eprint.apiFlow.request;


import java.util.HashSet;
import java.util.Set;

import javax.validation.Valid;
import javax.validation.constraints.*;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import fr.formation.eprint.apiFlow.response.MessageResponse;
import fr.formation.eprint.controllers.AuthController;
import fr.formation.eprint.entities.ERole;
import fr.formation.eprint.entities.Role;
import fr.formation.eprint.entities.User;
 
public class SignupRequest {
    @NotBlank
    @Size(min = 3, max = 20)
    private String username;
 
    @NotBlank
    @Size(max = 50)
    @Email
    private String email;
    
    private Set<String> role;
    
    @NotBlank
    @Size(min = 6, max = 40)
    private String password;
  
    public String getUsername() {
        return username;
    }
 
    public void setUsername(String username) {
        this.username = username;
    }
 
    public String getEmail() {
        return email;
    }
 
    public void setEmail(String email) {
        this.email = email;
    }
 
    public String getPassword() {
        return password;
    }
 
    public void setPassword(String password) {
        this.password = password;
    }
    
    public Set<String> getRole() {
      return this.role;
    }
    
    public void setRole(Set<String> role) {
      this.role = role;
    }

	@PostMapping("/signup")
	public ResponseEntity<?> registerUser(AuthController authController) {
		if (authController.userRepository.existsByUsername(getUsername())) {
			return ResponseEntity
					.badRequest()
					.body(new MessageResponse("Error: Username is already taken!"));
		}
	
		if (authController.userRepository.existsByEmail(getEmail())) {
			return ResponseEntity
					.badRequest()
					.body(new MessageResponse("Error: Email is already in use!"));
		}
	
		// Create new user's account
		User user = new User(getUsername(), 
							 getEmail(),
							 authController.encoder.encode(getPassword()));
	
		Set<String> strRoles = getRole();
		Set<Role> roles = new HashSet<>();
	
		if (strRoles == null) {
			Role userRole = authController.roleRepository.findByName(ERole.ROLE_USER)
					.orElseThrow(() -> new RuntimeException("Error: Role is not found."));
			roles.add(userRole);
		} else {
			strRoles.forEach(role -> {
				switch (role) {
				case "admin":
					Role adminRole = authController.roleRepository.findByName(ERole.ROLE_ADMIN)
							.orElseThrow(() -> new RuntimeException("Error: Role is not found."));
					roles.add(adminRole);
	
					break;
				case "sup":
					Role supRole = authController.roleRepository.findByName(ERole.ROLE_SUPERVISOR)
							.orElseThrow(() -> new RuntimeException("Error: Role is not found."));
					roles.add(supRole);
	
					break;
				default:
					Role userRole = authController.roleRepository.findByName(ERole.ROLE_USER)
							.orElseThrow(() -> new RuntimeException("Error: Role is not found."));
					roles.add(userRole);
				}
			});
		}
	
		user.setRoles(roles);
		authController.userRepository.save(user);
	
		return ResponseEntity.ok(new MessageResponse("User registered successfully!"));
	}
}
